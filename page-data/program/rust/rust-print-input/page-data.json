{
    "componentChunkName": "component---src-templates-post-js",
    "path": "/program/rust/rust-print-input/",
    "result": {"data":{"site":{"siteMetadata":{"title":"Mushroom Records"}},"markdownRemark":{"id":"ded2d75e-02ab-5b0c-83bc-e277aae62464","excerpt":"概要 Python しかわからねえマンが さっき始めたばかりの Rust を使って プログラムを作る 材料を調達 確認用のを見ながら文字列を学ぶ 文字を入力させたいので、Python で言うところのができるようにしたい Print…","html":"<h2>概要</h2>\n<ul>\n<li>Python しかわからねえマンが</li>\n<li>さっき始めたばかりの Rust を使って</li>\n<li>プログラムを作る</li>\n</ul>\n<h2>材料を調達</h2>\n<ul>\n<li>確認用の<code class=\"language-text\">printin</code>を見ながら文字列を学ぶ</li>\n<li>文字を入力させたいので、Python で言うところの<code class=\"language-text\">input</code>ができるようにしたい</li>\n</ul>\n<h2>Print の仕組みから学ぼう</h2>\n<p>とりあえず前回の記事で<code class=\"language-text\">Hello World</code>はできたので、<br>\n今回は<code class=\"language-text\">Print</code>を取り扱っていきます。</p>\n<h3>とにかく変数を文字列として Print する</h3>\n<div class=\"gatsby-highlight\" data-language=\"rust:title:main.rs\"><pre class=\"language-rust:title:main.rs\"><code class=\"language-rust:title:main.rs\">fn main() {\n    let text = &quot;aaaa&quot;;\n    println!(&quot;{}&quot;, text);\n}\n\n// aaaa</code></pre></div>\n<ul>\n<li><code class=\"language-text\">let ~</code>で変数を宣言</li>\n<li><code class=\"language-text\">\"{}\", ~</code>という書き方。\n<ul>\n<li>出力したいところに<code class=\"language-text\">{}</code>を置く。</li>\n<li>それをあとから<code class=\"language-text\">~</code>で置き換えるイメージ</li>\n</ul>\n</li>\n</ul>\n<blockquote>\n<p>「一般的に <code class=\"language-text\">{} </code>はどんな引数であろうと自動的に置き換えられます。」<br>\n<a href=\"https://doc.rust-jp.rs/rust-by-example-ja/hello/print.html\">フォーマットしてプリント - Rust By Example 日本語版</a></p>\n</blockquote>\n<h3>文字列を改行したい</h3>\n<ul>\n<li>改行したい場合は<code class=\"language-text\">\\n</code>を差し込めば改行される。</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"rust:title:main.rs\"><pre class=\"language-rust:title:main.rs\"><code class=\"language-rust:title:main.rs\">fn main() {\n    let text = &quot;aa\\naa&quot;;\n    println!(&quot;{}&quot;, text);\n}\n\n// -----出力\n// aa\n// aa\n// -----出力\n</code></pre></div>\n<ul>\n<li><code class=\"language-text\">\"</code>と<code class=\"language-text\">\";</code>の間であれば、実際に改行していてもにんし息されるらしい。</li>\n<li>この場合、インデントになっている<strong>スペースも文字列に含まれる</strong>ので取扱に注意が必要。</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"rust:title:main.rs\"><pre class=\"language-rust:title:main.rs\"><code class=\"language-rust:title:main.rs\">fn main() {\n    let text = &quot;aa\n    aa\naa&quot;;\n    println!(&quot;{}&quot;, text);\n}\n\n// -----出力\n// aa\n//     aa\n// aa\n// -----出力\n</code></pre></div>\n<h2>input の初歩</h2>\n<p>Python の場合、こういう記述で一発で input ができます。<br>\n便利ですね。</p>\n\n        <div class=\"gatsby-code-title\">\n          <span>main.py</span>\n        </div>\n       \n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\">s <span class=\"token operator\">=</span> <span class=\"token builtin\">input</span><span class=\"token punctuation\">(</span><span class=\"token string\">'文字列を入力してください >>>> '</span><span class=\"token punctuation\">)</span></code></pre></div>\n<h3>Rust ではどう書くか</h3>\n<p>ところが、Rust では input が一発でできないみたいです。<br>\n調べたらマクロ？というものを組む必要があるらしいんですが、<br>\n<strong>初学者が手つけたら死ぬな</strong>と思ったので、おとなしく諸々を書いていきます。</p>\n\n        <div class=\"gatsby-code-title\">\n          <span>main.rs</span>\n        </div>\n       \n<div class=\"gatsby-highlight\" data-language=\"rust\"><pre class=\"language-rust\"><code class=\"language-rust\"><span class=\"token keyword\">fn</span> <span class=\"token function-definition function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token macro property\">println!</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"フォルダの名前は？\\n>>>> \"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">let</span> <span class=\"token keyword\">mut</span> title <span class=\"token operator\">=</span> <span class=\"token class-name\">String</span><span class=\"token punctuation\">::</span><span class=\"token function\">new</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token comment\">// 入力機構</span>\n  <span class=\"token function\">stdin</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">read_line</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span><span class=\"token keyword\">mut</span> title<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">ok</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">expect</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Error\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token comment\">// 改行コードを抹消</span>\n  title <span class=\"token operator\">=</span> title<span class=\"token punctuation\">.</span><span class=\"token function\">trim</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">to_string</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token macro property\">println!</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"'{}'\"</span><span class=\"token punctuation\">,</span> title<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token comment\">// -----出力</span>\n<span class=\"token comment\">// フォルダの名前は？</span>\n<span class=\"token comment\">// >>>></span>\n<span class=\"token comment\">// test(と入力)</span>\n<span class=\"token comment\">// 'test'</span>\n<span class=\"token comment\">// -----出力</span>\n</code></pre></div>\n<ul>\n<li>ミュータブルな変数を宣言して</li>\n<li><code class=\"language-text\">std::io::stdin()</code>は<code class=\"language-text\">.read_line</code>を呼び出す前菜のようなものですかね</li>\n<li><code class=\"language-text\">.read_line(&amp;mut title)</code>で入力</li>\n<li>それを<code class=\"language-text\">title</code>にそれを書き込んで</li>\n<li><code class=\"language-text\">ok()</code>で指差し確認、ヨシ！</li>\n<li><code class=\"language-text\">expect()</code>で万が一だめなときでも、ヨシ！</li>\n<li>このままだと末端に改行コードが挿入されてしまう</li>\n<li>ので<code class=\"language-text\">trim()</code>して<code class=\"language-text\">to_string()</code>で整える(？)</li>\n</ul>\n<p>…ってところでしょうか、あんまり良くわかっていません。<br>\nマクロを書く書き方が主流みたいなので、<br>\n慣れたらそっちのほうが良さげです。</p>\n<h3>わかりやすくするために見た目を整えよう</h3>\n<p>ただ、このままだと</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">>>>>\ntest\n'test'</code></pre></div>\n<p>という風に出力されてしまいます。\nPython ライクに扱いたいので…</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">>>>> test\n'test'</code></pre></div>\n<p>と出力したい…なにか方法ないのかな…<br>\n<strong>…あるじゃん。</strong></p>\n\n        <div class=\"gatsby-code-title\">\n          <span>main.rs</span>\n        </div>\n       \n<div class=\"gatsby-highlight\" data-language=\"rust\"><pre class=\"language-rust\"><code class=\"language-rust\"><span class=\"token keyword\">use</span> <span class=\"token namespace\">std<span class=\"token punctuation\">::</span>io<span class=\"token punctuation\">::</span></span><span class=\"token class-name\">Write</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">fn</span> <span class=\"token function-definition function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token macro property\">print!</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"フォルダの名前は？\\n>>>> \"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token namespace\">std<span class=\"token punctuation\">::</span>io<span class=\"token punctuation\">::</span></span><span class=\"token function\">stdout</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">flush</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">unwrap</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">let</span> <span class=\"token keyword\">mut</span> title <span class=\"token operator\">=</span> <span class=\"token class-name\">String</span><span class=\"token punctuation\">::</span><span class=\"token function\">new</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token namespace\">std<span class=\"token punctuation\">::</span>io<span class=\"token punctuation\">::</span></span><span class=\"token function\">stdin</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">read_line</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span><span class=\"token keyword\">mut</span> title<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">ok</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">expect</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Error\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  title <span class=\"token operator\">=</span> title<span class=\"token punctuation\">.</span><span class=\"token function\">trim</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">to_string</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token macro property\">println!</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"'{}'\"</span><span class=\"token punctuation\">,</span> title<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<ul>\n<li><code class=\"language-text\">use std::io::Write;</code> は Python で言うところの<code class=\"language-text\">import ~</code></li>\n<li>とにかく<code class=\"language-text\">Write</code>の中に<code class=\"language-text\">flush()</code>というものがあるということでよろしく</li>\n<li><code class=\"language-text\">print!</code>を使うと改行コードが末尾に付加されずに済む</li>\n<li>ただ<code class=\"language-text\">flush()</code>を使わないと順番通りにいかないとのことなので入れておく(※)</li>\n</ul>\n<blockquote>\n<p>※<code class=\"language-text\">flush()</code>がどういうものなのか、<br>\n公式ドキュメント読んでもよくわからなかったので<br>\n有志の方いたらコメントください…</p>\n</blockquote>\n<p>これで理想通り</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">>>>> test\n'test'</code></pre></div>\n<p>と出力されるようになりました。</p>\n<h2>関数</h2>\n<p>出力はうまくいきましたが、問題は<strong>これを何度も書かなきゃいけない</strong>ことです。\nめんどくさいね…<code class=\"language-text\">fn main()</code>使ってるくらいだから関数化しちゃおうか。</p>\n<p>ということでできました。</p>\n\n        <div class=\"gatsby-code-title\">\n          <span>main.rs</span>\n        </div>\n       \n<div class=\"gatsby-highlight\" data-language=\"rust\"><pre class=\"language-rust\"><code class=\"language-rust\"><span class=\"token keyword\">use</span> <span class=\"token namespace\">std<span class=\"token punctuation\">::</span></span>io<span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">use</span> <span class=\"token namespace\">std<span class=\"token punctuation\">::</span>io<span class=\"token punctuation\">::</span></span><span class=\"token class-name\">Write</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// inputを扱う関数、引数はない</span>\n<span class=\"token keyword\">fn</span> <span class=\"token function-definition function\">input</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">-></span> <span class=\"token class-name\">String</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token macro property\">print!</span><span class=\"token punctuation\">(</span><span class=\"token string\">\">>>> \"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token namespace\">std<span class=\"token punctuation\">::</span>io<span class=\"token punctuation\">::</span></span><span class=\"token function\">stdout</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">flush</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">unwrap</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">let</span> <span class=\"token keyword\">mut</span> word <span class=\"token operator\">=</span> <span class=\"token class-name\">String</span><span class=\"token punctuation\">::</span><span class=\"token function\">new</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token namespace\">io<span class=\"token punctuation\">::</span></span><span class=\"token function\">stdin</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">read_line</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span><span class=\"token keyword\">mut</span> word<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">ok</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">return</span> word<span class=\"token punctuation\">.</span><span class=\"token function\">trim</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">to_string</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">fn</span> <span class=\"token function-definition function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token macro property\">println!</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"1？\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">let</span> a <span class=\"token operator\">=</span> <span class=\"token function\">input</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token macro property\">println!</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"2？\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">let</span> b <span class=\"token operator\">=</span> <span class=\"token function\">input</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token macro property\">println!</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"結果\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token macro property\">println!</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"'{}'\"</span><span class=\"token punctuation\">,</span> a<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token macro property\">println!</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"'{}'\"</span><span class=\"token punctuation\">,</span> b<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token punctuation\">}</span>\n</code></pre></div>\n<p>関数の考え方は Python と同じで良いようです。</p>\n\n        <div class=\"gatsby-code-title\">\n          <span>出力</span>\n        </div>\n       \n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">1？\n>>>> aaaa\n2？\n>>>> bbbb\n結果\n'aaaa'\n'bbbb'</code></pre></div>\n<h2>参考</h2>\n<ul>\n<li><a href=\"https://doc.rust-jp.rs/rust-by-example-ja/hello/print.html\">フォーマットしてプリント - Rust By Example 日本語版</a></li>\n<li><a href=\"https://note.com/densukeo/n/n1a803754b077\">Rust で 100 本ノック: 標準入力からの文字入力と数値変換｜ぐは｜ note</a></li>\n<li><a href=\"https://magidropack.hatenablog.com/entry/2018/12/18/194442#chapter02\">【Rust】コンソールにて文字列を入力し、結果を print にて出力させる方法 - Magidropack’s blog</a></li>\n<li><a href=\"http://ytyaru.hatenablog.com/entry/2020/07/26/000000\">Rust で print と read_line を 1 行にする方法 - やってみる</a></li>\n<li><a href=\"https://nju33.com/notes/rust/articles/%E6%96%87%E5%AD%97%E5%88%97#%E6%96%87%E5%AD%97%E5%88%97\">文字列 - Rust | nju33</a></li>\n</ul>","frontmatter":{"title":"Pythonerが、ゼロからRustで、Printとinputを使いたいの巻","date":"2021/02/17","description":"Rust"}}},"pageContext":{"id":"ded2d75e-02ab-5b0c-83bc-e277aae62464","previousPostId":"38158322-cceb-5d44-abac-d89c4e374f39","nextPostId":"828a2de5-1f71-587b-83a5-affaf8977e2f"}},
    "staticQueryHashes": ["3713412316"]}